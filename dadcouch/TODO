* populate track list one by one instead of after resolving all
* write tests for model.daddb
* move controllers to a base class
* make controllers react to changes for the documents they control
* use inlinecallbacks in code to make it more readable
* write a general-purpose paisley command line app
* write caching couchdb server in paisley that
  - caches complete docs parsed into objects by id and class
  - notifies about changes to cached docs
  - notifies about changes to previously returned view results
	(change/add/delete)
* use it to reimplement consistency checking, such that we can reuse the
  methods that look up a file for a track
* dadtest does not have categories, add to script
* dad does not have slices
* add verification that trackscores are unique
* slice-lookup: used by trackloader with wrong params, when it does not have
  track_id; also by getSlices in daddb; so maybe split in two separate views ?
* integrate new mapping into paisley
* release paisley
* find a way to either properly split or merge couchdb dad and other dad
* find a way not notify frontend that it's taking a while to get the info
  to start
* filter track selector view by artist/album/search
* show number of ratings in track view
* add change notifier and update track scores with a highlight
* use Model classes for data exchange
* Convert Database interface to return Model objects everywhere.
* Add notification to Model classes so we can make changes work.
